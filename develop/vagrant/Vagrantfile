# If not stated otherwise in this file or this component's LICENSE file the
# following copyright and licenses apply:
#
# Copyright 2022 Consult Red
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=begin
################################################################################
Vagrantfile to configure a VirtualBox VM that can be used for Dobby development.
Builds & installs the following components (plus dependencies):
  * Dobby (https://github.com/rdkcentral/Dobby/)
  * Crun (https://github.com/containers/crun)
  * Smcroute (https://github.com/troglobit/smcroute)
  * libnl (https://github.com/thom311/libnl)
  * DSM and USP Datamodel extensions (git@github.com:rdkcentral/DSM.git)
  * OBUSP ()
################################################################################
=end

Vagrant.configure("2") do |config|

    ##################################################
    #
    # VM Configuration (Ubuntu 20.04)
    #
    config.vm.box = "ubuntu/focal64"

    config.vm.hostname = "dsm-vagrant-focal"
    config.vm.define "dsm-vagrant-focal"

    config.vm.network "public_network"

    config.vagrant.plugins = "vagrant-disksize"
    config.vagrant.plugins = "vagrant-vbguest"
    config.disksize.size = '25GB'

    config.vm.provider "virtualbox" do |vb|
        vb.memory = "4096"  # Change this to reduce the amount of RAM assigned to the VM
        vb.cpus = "6"       # Change this to reduce the amount of cores assigned to the VM
        vb.customize ["modifyvm", :id, "--ioapic", "on", "--vram", "100", "--graphicscontroller", "vmsvga", "--audio", "none"]
    end

    ##################################################
    #
    # Git & SSH Config
    #
    # Forward SSH keys from host
    config.ssh.forward_agent = true

    # Copy host gitconfig
    config.vm.provision "file", source: "~/.gitconfig", destination: ".gitconfig"
    config.vm.provision "file", source: "~/.ssh", destination: "$HOME/.ssh"

    # Configure git/ssh keys
    config.vm.provision "shell", privileged: false, inline: <<-SHELL
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -Ht rsa github.com >> ~/.ssh/known_hosts
        ssh-keyscan -Ht ecdsa github.com >> ~/.ssh/known_hosts
    SHELL

    ##################################################
    #
    # Prepare to install dependencies
    #
    config.vm.provision "shell", inline: <<-SHELL
        apt update -y && apt upgrade -y
        apt install -y figlet
    SHELL

    ##################################################
    #
    # Install dependencies
    #
    config.vm.provision "shell", inline: <<-SHELL
        figlet DEPENDENCIES  # ASCII banner

        apt install -y build-essential cmake make git gcc pkgconf libtool libctemplate-dev libjsoncpp-dev libjsoncpp1 libdbus-1-dev libsystemd-dev libyajl-dev libcap-dev go-md2man autoconf automake libseccomp-dev libboost-dev valgrind libcunit1-dev liblog4c-dev libfreetype6-dev libjpeg-dev xorg-dev python3 python3-pip libarchive-dev libcurl4 libcurl4-gnutls-dev libssl-dev libgpgme11-dev libtool-bin libarchive13 bison flex
        #
        # Create build folders, links etc...
        #
        cp /usr/lib/x86_64-linux-gnu/dbus-1.0/include/dbus/dbus-arch-deps.h /usr/include/dbus-1.0/dbus
        mkdir -p /usr/lib/plugins/dobby
        mkdir -p /opt/persistent/rdk
        mkdir -p /var/volatile/rdk/dobby/bundles
        chmod 755 /var/volatile/rdk/dobby/bundles
    SHELL

    ##################################################
    #
    # Install USP dependencies
    #
    config.vm.provision "shell", inline: <<-SHELL
        figlet USP DEPENDENCIES  # ASCII banner

        apt install -y libssl-dev libcurl4-openssl-dev libsqlite3-dev libz-dev autoconf automake libtool  pkg-config net-tools
        apt-add-repository -y ppa:mosquitto-dev/mosquitto-ppa
        apt-get update
        apt-get install -y libmosquitto-dev libwebsockets-dev
    SHELL


    ##################################################
    #
    # Clone and build CRUN (could install from apt, but this ensures we have the latest version)
    #
    config.vm.provision "shell", privileged: false, inline: <<-SHELL
        figlet CRUN  # ASCII banner
        mkdir ~/crun
        cd ~/crun
        git clone https://github.com/containers/crun.git .
        ./autogen.sh
        ./configure
        sudo make install -j$(nproc)
        sudo ln -s /usr/local/bin/crun /usr/bin/crun
    SHELL

    ##################################################
    #
    # Clone and build SMCROUTE (used for testing Dobby multicast support)
    #
    config.vm.provision "shell", privileged: false, inline: <<-SHELL
        figlet SMCROUTE  # ASCII banner
        mkdir ~/smcroute
        cd ~/smcroute
        git clone --depth 1 --branch 2.5.5 https://github.com/troglobit/smcroute.git .
        ./autogen.sh
        ./configure
        sudo make install -j$(nproc)
        sudo ln -s /usr/local/sbin/smcroutectl /usr/sbin/smcroutectl
        sudo mkdir -p /usr/local/var/run
        sudo systemctl enable smcroute # enable the daemon by default
    SHELL

    ##################################################
    #
    # Clone and build latest libnl 3.5 (used by dobby networking plugin)
    #
    config.vm.provision "shell", privileged: false, inline: <<-SHELL
        figlet libnl  # ASCII banner
        mkdir ~/libnl
        cd ~/libnl
        git clone --depth 1 --branch libnl3_5_0 https://github.com/thom311/libnl.git .
        ./autogen.sh
        ./configure --prefix=/usr --sysconfdir=/etc --disable-static
        sudo make install -j$(nproc)
    SHELL

    ##################################################
    #
    # Clone DOBBY repo and install
    #
    # **If you want to clone your own fork of Dobby, change the repo URL here**
    #
    config.vm.provision "shell", privileged: false, inline: <<-SHELL
        figlet DOBBY  # ASCII banner
        # Build Dobby
        mkdir ~/srcDobby
        cd ~/srcDobby
        git clone https://github.com/rdkcentral/Dobby.git .
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DRDK_PLATFORM=DEV_VM -DCMAKE_INSTALL_PREFIX:PATH=/usr ../
        make -j$(nproc)
        sudo make install
        # Link for the DobbyInit tool
        sudo ln -s /usr/local/libexec/ /usr/libexec
        sudo ln -s /lib/x86_64-linux-gnu/libreadline.so.* /lib/
    SHELL

    ##################################################
    #
    # Set DBUS config
    #
    config.vm.provision "shell", inline: <<-SHELL
        figlet DBUS  # ASCII banner
        # FIXME - This is not secure - only for debugging
        if [ ! -e "/etc/dbus-1/system.d/org.rdk.dobby.conf" ]; then
            echo '
<!DOCTYPE busconfig PUBLIC "-//freedesktop//DTD D-Bus Bus Configuration 1.0//EN"
    "http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd">
<busconfig>
    <policy context="default">
    <!-- Allow everything to be sent -->
    <allow send_destination="*" eavesdrop="true"/>
    <!-- Allow everything to be received -->
    <allow eavesdrop="true"/>
    <!-- Allow anyone to own anything -->
    <allow own="*"/>
    <!-- XXX: Allow all users to connect -->
    <allow user="*"/>
</policy>
</busconfig>
' > "/etc/dbus-1/system.d/org.rdk.dobby.conf"
        fi
    SHELL

    ##################################################
    #
    # Clone DSM repo and install
    #
    # **If you want to clone your own fork of DSM, change the repo URL here**
    #
    config.vm.provision "shell", privileged: false, inline: <<-SHELL
        figlet DSM  # ASCII banner
        # Build Dsm
        mkdir ~/srcDsm
        cd ~/srcDsm
        git clone git@github.com:rdkcentral/DSM.git
        cd DSM
        mkdir build
        cd build
        cmake ..
        make -j$(nproc)
        sudo make install
        # TODO for now use the file in srcDsm.
        # could have a custom one in our vagrant repo that sets up nicely for the VM
        # config.vm.provision "file", source: ".dsm-config", destination: ".dsm-config"
        # to go inside the Vagrant.configure("2") do |config| section above
        
        mkdir -p /home/vagrant/destination
        mkdir -p /home/vagrant/repo
        cp /home/vagrant/srcDsm/DSM/src/dsm.config /home/vagrant/dsm.config

        echo 'export DSM_CONFIG_FILE=/home/vagrant/dsm.config' >> /home/vagrant/.bash_profile
    SHELL

    ##################################################
    #
    # Clone USP Agent repos and install
    # Note this also overlays vendor.c from a separate repo
    #
    # **If you want to clone your own fork of USP Agent, change the repo URL here**
    #
    config.vm.provision "shell", privileged: false, inline: <<-SHELL
        figlet USP  # ASCII banner
        # Build Usp
        mkdir ~/srcUsp
        cd ~/srcUsp
        git clone git@github.com:BroadbandForum/obuspa.git
        cd ./obuspa
        git checkout v4.1.0-master
        cp ../../srcDsm/DSM/integration/rdk-b-22q1/usp/rpi/new/vendor/lcm_datamodel.c src/vendor/lcm_datamodel.c # CP LCM code
	patch -p1 < ../../srcDsm/DSM/develop/usp/vendor/src/vendor.c.patch # Patch vendor integration to pull in LCM data model
 
        autoreconf --force --install
        ./configure
        make
        sudo make install
        ## TODO This does not overlay our data model TODO ##
    SHELL


    config.vm.provision "shell", privileged: false, inline: <<-SHELL
        figlet DONE
        echo "**************************************************************************"
        echo "***                     Vagrant provision complete!"                   ***
        echo "***               Run 'vagrant ssh' to SSH to your new VM"             ***
        echo "***            Dobby has been cloned and built @ ~/srcDobby"           ***
        echo "***            DSM has been cloned and built @ ~/srcDsm"               ***
        echo "**************************************************************************"
    SHELL
end
